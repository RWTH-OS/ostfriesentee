# SConscript
#
# Copyright (c) 2015 Kevin Laeufer <kevin.laeufer@rwth-aachen.de>
#
# This file is part of Ostfriesentee.
#
# Ostfriesentee is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ostfriesentee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Ostfriesentee.  If not, see <http://www.gnu.org/licenses/>.

import os

Import('env')

# build java code and run infuser
env_java = env.Clone()
env_java.AppendUnique(JAVACFLAGS = ['-encoding', 'utf8', '-Xlint:deprecation', '-Xlint:unchecked'])
classes      = env_java.Java('build/classes', 'java')
infusion_res = env_java.Infusion('build/infusion/base', classes)

# split up infusion
infusion_dhi = [os.path.abspath(str(f)) for f in infusion_res if str(f).endswith('.dhi')]
infusion_di  = [os.path.abspath(str(f)) for f in infusion_res if str(f).endswith('.di')]
infusion_c   = [os.path.abspath(str(f)) for f in infusion_res if str(f).endswith('.c')]
infusion_h   = [os.path.abspath(str(f)) for f in infusion_res if str(f).endswith('.h')]

# build c code
c_env = env.Clone()
c_env.VariantDir(variant_dir='build/base', src_dir='c')
c_env.Append(CPPPATH = [os.path.abspath('./build/infusion/base')])
c_env.Append(CPPPATH = [os.path.abspath('../../../vm/c')])
# TODO: move config somewhere else
c_env.Append(CPPPATH = [os.path.abspath('../../../config/native/c')])
c_env.Append(CPPPATH = [os.path.abspath('../../../architecture/native/c/')])

infusion = c_env.StaticLibrary('build/base', infusion_c + env.Glob('build/base/*.c'))

# add infusion and infusion header as well a c header to target
infusion += infusion_dhi + infusion_di + infusion_h

Return('infusion')
